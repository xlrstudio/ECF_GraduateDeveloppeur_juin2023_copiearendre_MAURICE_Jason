<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;

/* easycorp/easyadmin-bundle/src/Field/Configurator/FormConfigurator.php */
class __TwigTemplate_56159f95184eaa12cd86953b2b20a092 extends Template
{
    private $source;
    private $macros = [];

    public function __construct(Environment $env)
    {
        parent::__construct($env);

        $this->source = $this->getSourceContext();

        $this->parent = false;

        $this->blocks = [
        ];
    }

    protected function doDisplay(array $context, array $blocks = [])
    {
        $macros = $this->macros;
        $__internal_5a27a8ba21ca79b61932376b2fa922d2 = $this->extensions["Symfony\\Bundle\\WebProfilerBundle\\Twig\\WebProfilerExtension"];
        $__internal_5a27a8ba21ca79b61932376b2fa922d2->enter($__internal_5a27a8ba21ca79b61932376b2fa922d2_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "easycorp/easyadmin-bundle/src/Field/Configurator/FormConfigurator.php"));

        $__internal_6f47bbe9983af81f1e7450e9a3e3768f = $this->extensions["Symfony\\Bridge\\Twig\\Extension\\ProfilerExtension"];
        $__internal_6f47bbe9983af81f1e7450e9a3e3768f->enter($__internal_6f47bbe9983af81f1e7450e9a3e3768f_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "easycorp/easyadmin-bundle/src/Field/Configurator/FormConfigurator.php"));

        // line 1
        echo "<?php

namespace EasyCorp\\Bundle\\EasyAdminBundle\\Field\\Configurator;

use EasyCorp\\Bundle\\EasyAdminBundle\\Context\\AdminContext;
use EasyCorp\\Bundle\\EasyAdminBundle\\Contracts\\Field\\FieldConfiguratorInterface;
use EasyCorp\\Bundle\\EasyAdminBundle\\Dto\\EntityDto;
use EasyCorp\\Bundle\\EasyAdminBundle\\Dto\\FieldDto;
use EasyCorp\\Bundle\\EasyAdminBundle\\Field\\FormField;
use EasyCorp\\Bundle\\EasyAdminBundle\\Form\\Type\\EaFormRowType;

/**
 * @author Javier Eguiluz <javier.eguiluz@gmail.com>
 */
final class FormConfigurator implements FieldConfiguratorInterface
{
    public function supports(FieldDto \$field, EntityDto \$entityDto): bool
    {
        return FormField::class === \$field->getFieldFqcn();
    }

    public function configure(FieldDto \$field, EntityDto \$entityDto, AdminContext \$context): void
    {
        // if label is NULL, its value is autogenerated from the property name.
        // But property names don't make sense for this kind of special field, so
        // make the label FALSE to not display it
        if (null === \$field->getLabel()) {
            \$field->setLabel(false);
        }

        if (EaFormRowType::class === \$field->getFormType()) {
            \$breakpointName = \$field->getCustomOption(FormField::OPTION_ROW_BREAKPOINT);
            if ('' === \$breakpointName) {
                // this empty string is \"the name\" used for XS size, when no real breakpoint is applied
                \$cssClasses = 'flex-fill';
            } else {
                \$cssClasses = sprintf('d-none d-%s-flex flex-%s-fill', \$breakpointName, \$breakpointName);
            }

            \$field->setFormTypeOption('row_attr.class', \$field->getFormTypeOption('row_attr.class').' '.\$cssClasses);
        }
    }
}
";
        
        $__internal_5a27a8ba21ca79b61932376b2fa922d2->leave($__internal_5a27a8ba21ca79b61932376b2fa922d2_prof);

        
        $__internal_6f47bbe9983af81f1e7450e9a3e3768f->leave($__internal_6f47bbe9983af81f1e7450e9a3e3768f_prof);

    }

    public function getTemplateName()
    {
        return "easycorp/easyadmin-bundle/src/Field/Configurator/FormConfigurator.php";
    }

    public function getDebugInfo()
    {
        return array (  43 => 1,);
    }

    public function getSourceContext()
    {
        return new Source("<?php

namespace EasyCorp\\Bundle\\EasyAdminBundle\\Field\\Configurator;

use EasyCorp\\Bundle\\EasyAdminBundle\\Context\\AdminContext;
use EasyCorp\\Bundle\\EasyAdminBundle\\Contracts\\Field\\FieldConfiguratorInterface;
use EasyCorp\\Bundle\\EasyAdminBundle\\Dto\\EntityDto;
use EasyCorp\\Bundle\\EasyAdminBundle\\Dto\\FieldDto;
use EasyCorp\\Bundle\\EasyAdminBundle\\Field\\FormField;
use EasyCorp\\Bundle\\EasyAdminBundle\\Form\\Type\\EaFormRowType;

/**
 * @author Javier Eguiluz <javier.eguiluz@gmail.com>
 */
final class FormConfigurator implements FieldConfiguratorInterface
{
    public function supports(FieldDto \$field, EntityDto \$entityDto): bool
    {
        return FormField::class === \$field->getFieldFqcn();
    }

    public function configure(FieldDto \$field, EntityDto \$entityDto, AdminContext \$context): void
    {
        // if label is NULL, its value is autogenerated from the property name.
        // But property names don't make sense for this kind of special field, so
        // make the label FALSE to not display it
        if (null === \$field->getLabel()) {
            \$field->setLabel(false);
        }

        if (EaFormRowType::class === \$field->getFormType()) {
            \$breakpointName = \$field->getCustomOption(FormField::OPTION_ROW_BREAKPOINT);
            if ('' === \$breakpointName) {
                // this empty string is \"the name\" used for XS size, when no real breakpoint is applied
                \$cssClasses = 'flex-fill';
            } else {
                \$cssClasses = sprintf('d-none d-%s-flex flex-%s-fill', \$breakpointName, \$breakpointName);
            }

            \$field->setFormTypeOption('row_attr.class', \$field->getFormTypeOption('row_attr.class').' '.\$cssClasses);
        }
    }
}
", "easycorp/easyadmin-bundle/src/Field/Configurator/FormConfigurator.php", "C:\\xampp\\apps\\symfony\\templates\\easycorp\\easyadmin-bundle\\src\\Field\\Configurator\\FormConfigurator.php");
    }
}
