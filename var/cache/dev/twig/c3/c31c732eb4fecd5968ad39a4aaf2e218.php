<?php

use Twig\Environment;
use Twig\Error\LoaderError;
use Twig\Error\RuntimeError;
use Twig\Extension\SandboxExtension;
use Twig\Markup;
use Twig\Sandbox\SecurityError;
use Twig\Sandbox\SecurityNotAllowedTagError;
use Twig\Sandbox\SecurityNotAllowedFilterError;
use Twig\Sandbox\SecurityNotAllowedFunctionError;
use Twig\Source;
use Twig\Template;

/* easycorp/easyadmin-bundle/src/Maker/ClassMaker.php */
class __TwigTemplate_ba1edf35d43913e88767e372cf729af1 extends Template
{
    private $source;
    private $macros = [];

    public function __construct(Environment $env)
    {
        parent::__construct($env);

        $this->source = $this->getSourceContext();

        $this->parent = false;

        $this->blocks = [
        ];
    }

    protected function doDisplay(array $context, array $blocks = [])
    {
        $macros = $this->macros;
        $__internal_5a27a8ba21ca79b61932376b2fa922d2 = $this->extensions["Symfony\\Bundle\\WebProfilerBundle\\Twig\\WebProfilerExtension"];
        $__internal_5a27a8ba21ca79b61932376b2fa922d2->enter($__internal_5a27a8ba21ca79b61932376b2fa922d2_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "easycorp/easyadmin-bundle/src/Maker/ClassMaker.php"));

        $__internal_6f47bbe9983af81f1e7450e9a3e3768f = $this->extensions["Symfony\\Bridge\\Twig\\Extension\\ProfilerExtension"];
        $__internal_6f47bbe9983af81f1e7450e9a3e3768f->enter($__internal_6f47bbe9983af81f1e7450e9a3e3768f_prof = new \Twig\Profiler\Profile($this->getTemplateName(), "template", "easycorp/easyadmin-bundle/src/Maker/ClassMaker.php"));

        // line 1
        echo "<?php

namespace EasyCorp\\Bundle\\EasyAdminBundle\\Maker;

use Symfony\\Component\\Filesystem\\Filesystem;
use Symfony\\Component\\HttpKernel\\KernelInterface;
use function Symfony\\Component\\String\\u;

final class ClassMaker
{
    private KernelInterface \$kernel;
    private string \$projectDir;
    private Filesystem \$fs;

    public function __construct(KernelInterface \$kernel, string \$projectDir)
    {
        \$this->kernel = \$kernel;
        \$this->projectDir = \$projectDir;
        \$this->fs = new Filesystem();
    }

    /**
     * @return string The path of the created file (relative to the project dir)
     */
    public function make(string \$generatedFilePathPattern, string \$skeletonName, array \$skeletonParameters): string
    {
        \$skeletonPath = sprintf('%s/%s', \$this->kernel->locateResource('@EasyAdminBundle/Resources/skeleton'), \$skeletonName);
        \$generatedFileRelativeDir = u(\$generatedFilePathPattern)->beforeLast('/')->trimEnd('/')->toString();
        \$generatedFileNamePattern = u(\$generatedFilePathPattern)->afterLast('/')->trimStart('/');

        \$generatedFileDir = sprintf('%s/%s', \$this->projectDir, \$generatedFileRelativeDir);
        \$this->fs->mkdir(\$generatedFileDir);
        if (!\$this->fs->exists(\$generatedFileDir)) {
            throw new \\RuntimeException(sprintf('The \"%s\" directory does not exist and cannot be created, so the class generated by this command cannot be created.', \$generatedFileDir));
        }

        // first, try to create a file name without any autoincrement index in it
        \$generatedFileName = \$generatedFileNamePattern->replace('{number}', '');
        \$i = 1;
        while (\$this->fs->exists(sprintf('%s/%s', \$generatedFileDir, \$generatedFileName))) {
            \$generatedFileName = \$generatedFileNamePattern->replace('{number}', (string) ++\$i);
        }
        \$generatedFilePath = sprintf('%s/%s', \$generatedFileDir, \$generatedFileName);

        \$skeletonParameters = array_merge(\$skeletonParameters, [
            'class_name' => u(\$generatedFileName)->beforeLast('.php')->toString(),
        ]);

        \$this->fs->dumpFile(\$generatedFilePath, \$this->renderSkeleton(\$skeletonPath, \$skeletonParameters));

        return u(\$generatedFilePath)->after(\$this->projectDir)->trim('/')->toString();
    }

    private function renderSkeleton(string \$filePath, array \$parameters): string
    {
        ob_start();
        extract(\$parameters, \\EXTR_SKIP);
        include \$filePath;

        return ob_get_clean();
    }
}
";
        
        $__internal_5a27a8ba21ca79b61932376b2fa922d2->leave($__internal_5a27a8ba21ca79b61932376b2fa922d2_prof);

        
        $__internal_6f47bbe9983af81f1e7450e9a3e3768f->leave($__internal_6f47bbe9983af81f1e7450e9a3e3768f_prof);

    }

    public function getTemplateName()
    {
        return "easycorp/easyadmin-bundle/src/Maker/ClassMaker.php";
    }

    public function getDebugInfo()
    {
        return array (  43 => 1,);
    }

    public function getSourceContext()
    {
        return new Source("<?php

namespace EasyCorp\\Bundle\\EasyAdminBundle\\Maker;

use Symfony\\Component\\Filesystem\\Filesystem;
use Symfony\\Component\\HttpKernel\\KernelInterface;
use function Symfony\\Component\\String\\u;

final class ClassMaker
{
    private KernelInterface \$kernel;
    private string \$projectDir;
    private Filesystem \$fs;

    public function __construct(KernelInterface \$kernel, string \$projectDir)
    {
        \$this->kernel = \$kernel;
        \$this->projectDir = \$projectDir;
        \$this->fs = new Filesystem();
    }

    /**
     * @return string The path of the created file (relative to the project dir)
     */
    public function make(string \$generatedFilePathPattern, string \$skeletonName, array \$skeletonParameters): string
    {
        \$skeletonPath = sprintf('%s/%s', \$this->kernel->locateResource('@EasyAdminBundle/Resources/skeleton'), \$skeletonName);
        \$generatedFileRelativeDir = u(\$generatedFilePathPattern)->beforeLast('/')->trimEnd('/')->toString();
        \$generatedFileNamePattern = u(\$generatedFilePathPattern)->afterLast('/')->trimStart('/');

        \$generatedFileDir = sprintf('%s/%s', \$this->projectDir, \$generatedFileRelativeDir);
        \$this->fs->mkdir(\$generatedFileDir);
        if (!\$this->fs->exists(\$generatedFileDir)) {
            throw new \\RuntimeException(sprintf('The \"%s\" directory does not exist and cannot be created, so the class generated by this command cannot be created.', \$generatedFileDir));
        }

        // first, try to create a file name without any autoincrement index in it
        \$generatedFileName = \$generatedFileNamePattern->replace('{number}', '');
        \$i = 1;
        while (\$this->fs->exists(sprintf('%s/%s', \$generatedFileDir, \$generatedFileName))) {
            \$generatedFileName = \$generatedFileNamePattern->replace('{number}', (string) ++\$i);
        }
        \$generatedFilePath = sprintf('%s/%s', \$generatedFileDir, \$generatedFileName);

        \$skeletonParameters = array_merge(\$skeletonParameters, [
            'class_name' => u(\$generatedFileName)->beforeLast('.php')->toString(),
        ]);

        \$this->fs->dumpFile(\$generatedFilePath, \$this->renderSkeleton(\$skeletonPath, \$skeletonParameters));

        return u(\$generatedFilePath)->after(\$this->projectDir)->trim('/')->toString();
    }

    private function renderSkeleton(string \$filePath, array \$parameters): string
    {
        ob_start();
        extract(\$parameters, \\EXTR_SKIP);
        include \$filePath;

        return ob_get_clean();
    }
}
", "easycorp/easyadmin-bundle/src/Maker/ClassMaker.php", "C:\\xampp\\apps\\symfony\\templates\\easycorp\\easyadmin-bundle\\src\\Maker\\ClassMaker.php");
    }
}
